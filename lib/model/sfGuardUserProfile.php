<?php


/**
 * Skeleton subclass for representing a row from the 'sf_guard_user_profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.0 on:
 *
 * 08/20/12 12:44:33
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class sfGuardUserProfile extends BasesfGuardUserProfile {

	/**
	 * Initializes internal state of sfGuardUserProfile object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}
	
	public function assignOneProject($projectId)
	{
		$userProj = new UserProject();
		$userProj->setProjectId($projectId);
		$userProj->setUserId($this->getUserId());
		$userProj->save();
	}
	
	public function unassignOneProject($projectId)
	{
		$userProj = UserProjectPeer::retrieveByUserIdProjectId($this->getUserId(),$projectId);
		$userProj->delete();
	}
	
	public function updateProjectAssignment($userProjectAssignments = Array())
	{
		if(count($userProjectAssignments) > 0)
		{
			$this->clearExistingProjectAssignment();
			
			foreach($userProjectAssignments as $assignment)
			{
				$this->assignOneProject($assignment);
			}
		}
	}
	
	
	private function clearExistingProjectAssignment()
	{
		$allAssignments = UserProjectPeer::retrieveByUserId($this->getUserId());
		if(count($allAssignments) > 0)
		{
			foreach($allAssignments as $assignment)
			{
				$assignment->delete();
			}
		}
	}
	
	public function retrieveProjectAssignments()
	{
		$allAssignments = UserProjectPeer::retrieveByUserId($this->getUserId());
		$projArray =Array();
		
		if(count($allAssignments) > 0)
		{
			foreach($allAssignments as $assignment)
			{
				$projArray[] = BtoprojectPeer::retrieveByPk($assignment->getProjectId());
			}
		}
		
		return $projArray;
	}
	
	public function retrieveActiveProjectAssignments()
	{
		$allAssignments = UserProjectPeer::retrieveByUserId($this->getUserId());
		$projArray =Array();
		
		if(count($allAssignments) > 0)
		{
			foreach($allAssignments as $assignment)
			{
				$projItem = BtoprojectPeer::retrieveByPk($assignment->getProjectId());
				if($projItem->getState()=="A")
				{
					$projArray[] = $projItem;	
				}
				
			}
		}
		
		return $projArray;
	}
	
	public function isOver12hours($date, $addedAmount)
	{
		$hoursRegistration = HoursPeer::retrieveByDateUser($date, $this->getUserId());
		
		$over12Hours = false;
		$totalDailyHours = 0;
		
		if(count($hoursRegistration) > 0)
		{
			foreach($hoursRegistration as $hours)
			{
				$totalDailyHours = $totalDailyHours + $hours->getAmount();
			}
		}	
		
		if(($totalDailyHours + $addedAmount) > 12)
			$over12Hours = true;
		
		
		return $over12Hours;
	}
	
	public function cleanupHours($date, $component_id)
	{
		$hoursAssignment = HoursPeer::retrieveByDateComponentUser($date, $component_id, $this->getUserId());
		
		
		if($hoursAssignment)
		{
			$hoursAssignment->delete();
			
		}
	}

} // sfGuardUserProfile
